

// HTTP headers contain metadata in key-value pairs that are sent along with 
// HTTP requests and responses. providing essential information about the 
// communication between the client and server. They include details such as 
// content type, encoding, cache control, authentication, and more, helping 
// manage the behavior of HTTP transactions.
// They can be used to define caching behavior, facilitate authentication, and 
// manage session state. HTTP headers help the API client and server communicate 
// more effectively—and enable developers to optimize and customize the API’s 
// behavior.
// Custom proprietary headers have historically been used with an X- prefix, 
// but this convention was deprecated in June 2012

// What are the most common HTTP headers?
// HTTP headers play a crucial role in server and client behavior throughout the 
// request and response cycle. Request headers are sent by the client to the 
// server and contain information and instructions related to the requested 
// resource, while response headers are sent by the server to the client and 
// provide metadata, instructions, and additional information about the response 
// itself.

// Some of the most commonly used request headers are:
//01) Accept:
// The Accept header defines the media types that the client is able to accept 
// from the server. For instance, Accept: application/json, text/html indicates 
// that the client prefers JSON or HTML responses. This information allows the 
// server to send a resource representation that meets the client’s needs.

//02) User-Agent
// The User-Agent header identifies the web browser or client application that 
// is making the request, which enables the server to tailor its response to the 
// client. For instance, if the User-Agent header indicates that the request is 
// coming from the Chrome browser, the server may include CSS prefixes for CSS 
// properties that are compatible with Chrome.

//03) Authorization
// The Authorization header is used to send the client’s credentials to the 
// server when the client is attempting to access a protected resource. For 
// instance, the client might include a JSON Web Token (JWT) as the value of the 
// header, which the server will then verify before returning the requested 
// resource.

//04) Content-Type
// The Content-Type header identifies the media type of the content in the 
// request body. For instance, Content-Type: application/json indicates that the 
// request body contains JSON data. This information helps the server successfully 
// interpret and process the payload.

//05) Cookie
// The client can use the Cookie header to send previously stored cookies back 
// to the server. The server then uses these cookies to associate the request 
// with a specific user or session. This header plays an important role in 
// delivering personalized experiences, as it enables the server to remember a 
// user’s login state or language preference.


// The most common response headers are:
//01) Content-Type
// The Content-Type response header is the counterpart of the Content-Type 
// request header, as it indicates the type of data that the server is sending 
// to the client. The header value typically includes the media type (such as 
// text/html, application/json, image/jpeg, and audio/mp3), as well as any 
// optional parameters.

//02) Cache-Control
// The Cache-Control header controls caching behavior in the client’s browser or 
// intermediate caches. It defines how the response can be cached, when it 
// expires, and how it should be revalidated. For example, Cache-Control: 
// max-age=3600, public instructs the client to cache the response for a maximum 
// of 3600 seconds (1 hour) and allows caching by public caches.

//03) Server
// The Server header includes the name and version of the server software that 
// generated the response, as well as information about the server’s technology 
// stack. For instance, Server: Apache/2.4.10 (Unix) indicates that the response 
// was generated by the Apache web server version 2.4.10. It’s important to note 
// that the Server header is informational and doesn’t affect the API’s 
// functionality.

// Set-Cookie
// The Set-Cookie header instructs the client to store a cookie with the 
// specified name, value, and additional attributes, such as expiration, domain, 
// path, and security flags. The client will then include the cookie in 
// subsequent requests in order to facilitate stateful communication and 
// personalized experiences.

// Content-Length
// The Content-Length header, which specifies the size of the response body in 
// bytes, can help the client anticipate how much data it is going to receive. 
// This improves performance by allowing the client to plan in advance for more 
// efficient memory allocation and data processing.


